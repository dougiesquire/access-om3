diff --git a/MOM6/config_src/drivers/nuopc_cap/mom_cap_methods.F90 b/MOM6/config_src/drivers/nuopc_cap/mom_cap_methods.F90.new
index db8bc33..7fcec92 100644
--- a/MOM6/config_src/drivers/nuopc_cap/mom_cap_methods.F90
+++ b/MOM6/config_src/drivers/nuopc_cap/mom_cap_methods.F90.new
@@ -21,6 +21,9 @@ use MOM_surface_forcing_nuopc, only: ice_ocean_boundary_type
 use MOM_grid,                  only: ocean_grid_type
 use MOM_domains,               only: pass_var
 use mpp_domains_mod,           only: mpp_get_compute_domain
+use MOM_coupler_types,         only: coupler_1d_bc_type, coupler_2d_bc_type
+use MOM_coupler_types,         only: coupler_type_spawn, set_coupler_type_data
+use MOM_coupler_types,         only: ind_pcair, ind_u10, ind_psurf
 
 ! By default make data private
 implicit none; private
@@ -72,13 +75,16 @@ end subroutine mom_set_geomtype
 !> This function has a few purposes:
 !! (1) it imports surface fluxes using data from the mediator; and
 !! (2) it can apply restoring in SST and SSS.
-subroutine mom_import(ocean_public, ocean_grid, importState, ice_ocean_boundary, cesm_coupled, rc)
+subroutine mom_import(ocean_public, ocean_grid, importState, ice_ocean_boundary, cesm_coupled, rc, gas_fields_atm)
   type(ocean_public_type)       , intent(in)    :: ocean_public       !< Ocean surface state
   type(ocean_grid_type)         , intent(in)    :: ocean_grid         !< Ocean model grid
   type(ESMF_State)              , intent(inout) :: importState        !< incoming data from mediator
   type(ice_ocean_boundary_type) , intent(inout) :: ice_ocean_boundary !< Ocean boundary forcing
   logical                       , intent(in)    :: cesm_coupled       !< Flag to check if coupled with cesm
   integer                       , intent(inout) :: rc                 !< Return code
+  type(coupler_1d_bc_type), optional, intent(in) :: gas_fields_atm    !< If present, this type describes the atmospheric
+                                                                      !! tracer fields used to calculate generic tracer
+                                                                      !! fluxes
 
   ! Local Variables
   integer                         :: i, j, ib, ig, jg, n
@@ -89,7 +95,9 @@ subroutine mom_import(ocean_public, ocean_grid, importState, ice_ocean_boundary,
   real(ESMF_KIND_R8), allocatable :: tauy(:,:)
   real(ESMF_KIND_R8), allocatable :: stkx(:,:,:)
   real(ESMF_KIND_R8), allocatable :: stky(:,:,:)
+  real(ESMF_KIND_R8), allocatable :: work(:,:)
   character(len=*)  , parameter   :: subname = '(mom_import)'
+  type(coupler_2d_bc_type)        :: atm_fields
 
   rc = ESMF_SUCCESS
 
@@ -356,6 +364,58 @@ subroutine mom_import(ocean_public, ocean_grid, importState, ice_ocean_boundary,
       deallocate(stkx,stky)
   endif
 
+  !---
+  ! Tracer flux fields for generic tracers
+  !---
+  if (present(gas_fields_atm)) then
+    ! Spawn 2D version of gas_fields_atm to unpack coupled field into
+    call coupler_type_spawn(gas_fields_atm, atm_fields, (/isc,isc,iec,iec/), &
+                              (/jsc,jsc,jec,jec/), as_needed=.true.)
+
+    ! Set fields in atm_fields
+    ! TODO: Need better logic here to determine which fields to import.
+    ! For now just hadnling BLING gas flux fields
+    do n = 1, atm_fields%num_bcs
+      if (atm_fields%bc(n)%name .eq. 'co2_flux') then
+        call ESMF_LogWrite(trim(subname)//': coupling pcair field for generic_tracer flux: '//&
+              trim(atm_fields%bc(n)%name), ESMF_LOGMSG_INFO)
+        allocate (work(isc:iec,jsc:jec))
+        call state_getimport(importState, 'Sa_co2prog', isc, iec, jsc, jec, work, rc=rc)
+        if (ChkErr(rc,__LINE__,u_FILE_u)) return
+        call set_coupler_type_data(work, n, atm_fields, &
+              idim=(/isc,isc,iec,iec/), jdim=(/jsc,jsc,jec,jec/), field_index=ind_pcair)
+        deallocate(work)
+      elseif (atm_fields%bc(n)%name .eq. 'o2_flux') then
+        call ESMF_LogWrite(trim(subname)//': coupling pcair field for generic_tracer flux: '//&
+              trim(atm_fields%bc(n)%name), ESMF_LOGMSG_INFO)
+        allocate (work(isc:iec,jsc:jec))
+        call state_getimport(importState, 'Sa_o2', isc, iec, jsc, jec, work, rc=rc)
+        if (ChkErr(rc,__LINE__,u_FILE_u)) return
+        call set_coupler_type_data(work, n, atm_fields, &
+              idim=(/isc,isc,iec,iec/), jdim=(/jsc,jsc,jec,jec/), field_index=ind_pcair)
+        deallocate(work)
+      else
+        call ESMF_LogWrite(trim(subname)//': uncoupled fields for generic_tracer flux: '//&
+              trim(atm_fields%bc(n)%name), ESMF_LOGMSG_INFO)
+      endif
+      if ( &
+          atm_fields%bc(n)%flux_type .eq. 'air_sea_gas_flux_generic' .or. &
+          atm_fields%bc(n)%flux_type .eq. 'air_sea_gas_flux' &
+         ) then
+        call ESMF_LogWrite(trim(subname)//': coupling u10 for generic_tracer flux: '//&
+              trim(atm_fields%bc(n)%name), ESMF_LOGMSG_INFO)
+        call set_coupler_type_data(sqrt(ice_ocean_boundary%u10_sqr), n, atm_fields, &
+              idim=(/isc,isc,iec,iec/), jdim=(/jsc,jsc,jec,jec/), field_index=ind_u10)
+        call ESMF_LogWrite(trim(subname)//': coupling psurf field for generic_tracer flux: '//&
+              trim(atm_fields%bc(n)%name), ESMF_LOGMSG_INFO)
+        call set_coupler_type_data(ice_ocean_boundary%p, n, atm_fields, &
+              idim=(/isc,isc,iec,iec/), jdim=(/jsc,jsc,jec,jec/), field_index=ind_psurf)
+      endif
+    enddo
+
+    ! TODO: Calculate fluxes from ocean_public%fields and atm_fields into ice_ocean_boundary%fluxes
+  endif
+
 end subroutine mom_import
 
 !> Maps outgoing ocean data to ESMF State
